<%- include("../../views/partials/admin/header") %>

<head>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
</head>

<style>
    .error-message {
        color: red;
        font-size: 0.875rem;
        margin-top: 0.25rem;
    }
    .image-preview-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
        gap: 15px;
        margin: 15px 0;
    }
    .preview-image-card {
        position: relative;
        border: 1px solid #ddd;
        border-radius: 8px;
        overflow: hidden;
        margin: 10px;
    }
    .thumbnail {
        width: 200px;
        height: 200px;
        object-fit: cover;
        border-radius: 5px;
    }
    .preview-image-actions {
        position: absolute;
        top: 5px;
        right: 5px;
        display: flex;
        gap: 5px;
        background: rgba(255, 255, 255, 0.9);
        border-radius: 4px;
        padding: 2px;
    }
    .image-upload-section {
        border: 2px dashed #ddd;
        padding: 20px;
        border-radius: 8px;
        margin-bottom: 20px;
    }
    .upload-button-container {
        display: flex;
        justify-content: center;
        margin-top: 15px;
    }
    .image-input-hidden {
        display: none;
    }
    .upload-placeholder {
        border: 2px dashed #ccc;
        border-radius: 8px;
        padding: 20px;
        text-align: center;
        cursor: pointer;
        transition: all 0.3s ease;
    }
    .upload-placeholder:hover {
        border-color: #007bff;
        background-color: #f8f9fa;
    }
    .price-group {
        position: relative;
    }
    .price-group .form-control {
        padding-left: 25px;
    }
    .price-group:before {
        content: '$';
        position: absolute;
        left: 10px;
        top: 50%;
        transform: translateY(-50%);
        z-index: 1;
    }
    .crop-modal {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 0, 0, 0.8);
        z-index: 1000;
    }
    .crop-container {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background: white;
        padding: 20px;
        border-radius: 8px;
        max-width: 90vw;
        max-height: 90vh;
        overflow: auto;
    }
    .crop-area {
        max-width: 500px;
        max-height: 500px;
        margin: 0 auto;
    }
</style>

<section class="content-main container mt-4">
    <div class="row">
        <div class="col-12">
            <div class="content-header text-center mb-4">
                <h2 class="content-title">Add New Product</h2>
            </div>
        </div>
        <div class="col-lg-8 offset-lg-2">
            <div class="card p-4 shadow-sm">
                <div class="card-body">
                    <form method="POST" action="/admin/addProduct" enctype="multipart/form-data" onsubmit="return validateForm()">
                        <!-- Product Name -->
                        <div class="mb-3">
                            <label for="product_name" class="form-label">Product Name</label>
                            <input type="text" name="name" class="form-control" id="product_name" placeholder="Enter product name" required>
                            <div id="productName-error" class="error-message"></div>
                        </div>

                        <!-- Brand -->
                        <div class="mb-3">
                            <label class="form-label">Brand</label>
                            <select class="form-select" name="brand" required>
                                <option value="">Select a brand</option>
                                <% brands.forEach(brand => { %>
                                    <option value="<%= brand._id %>"><%= brand.name %></option>
                                <% }); %>
                            </select>
                            <div id="brand-error" class="error-message"></div>
                        </div>

                        <!-- Description -->
                        <div class="mb-3">
                            <label class="form-label">Description</label>
                            <textarea name="description" class="form-control" rows="4" placeholder="Enter product description" required></textarea>
                            <div id="description-error" class="error-message"></div>
                        </div>

                        <!-- Prices -->
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label class="form-label">Regular Price</label>
                                <div class="price-group">
                                    <input name="regularPrice" type="number" class="form-control" step="0.01" min="0" placeholder="0.00" required>
                                </div>
                                <div id="regularPrice-error" class="error-message"></div>
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">Sale Price (Optional)</label>
                                <div class="price-group">
                                    <input name="salePrice" type="number" class="form-control" step="0.01" min="0" placeholder="0.00">
                                </div>
                                <div id="salePrice-error" class="error-message"></div>
                            </div>
                        </div>

                        <!-- Quantity and Color -->
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label class="form-label">Quantity</label>
                                <input name="quantity" type="number" class="form-control" min="0" placeholder="Enter quantity" required>
                                <div id="quantity-error" class="error-message"></div>
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">Color</label>
                                <input name="color" type="text" class="form-control" placeholder="Enter color" required>
                                <div id="color-error" class="error-message"></div>
                            </div>
                        </div>

                        <!-- Category -->
                        <div class="mb-3">
                            <label class="form-label">Category</label>
                            <select class="form-select" name="category" required>
                                <option value="">Select a category</option>
                                <% categories.forEach(category => { %>
                                    <option value="<%= category._id %>"><%= category.name %></option>
                                <% }); %>
                            </select>
                            <div id="category-error" class="error-message"></div>
                        </div>

                        <!-- Image Upload Section -->
                        <div class="card mb-4">
                            <div class="card-header">
                                <h4>Product Images</h4>
                                <small class="text-muted">Upload up to 4 images (Required)</small>
                            </div>
                            <div class="card-body">
                                <!-- Preview Container -->
                                <div class="preview-container">
                                    <div class="image-preview-grid" id="imagePreviewGrid"></div>
                                </div>

                                <!-- Upload Section -->
                                <div class="image-upload-section">
                                    <div class="upload-placeholder" id="uploadPlaceholder">
                                        <i class="fas fa-cloud-upload-alt fa-2x mb-2"></i>
                                        <p class="mb-0">Click to select images or drag and drop here</p>
                                        <small class="text-muted">Maximum 4 images, each up to 5MB</small>
                                    </div>
                                    <input type="file" id="imageInput" name="productImages" 
                                           class="image-input-hidden"
                                           multiple>
                                    <div class="upload-button-container">
                                        <button type="button" class="btn btn-primary" onclick="triggerFileInput()">
                                            Select Images
                                        </button>
                                    </div>
                                </div>
                                <div id="images-error" class="error-message"></div>
                            </div>
                        </div>

                        <!-- Submit Button -->
                        <div class="text-center">
                            <button class="btn btn-primary w-50" type="submit">Add Product</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</section>

<!-- Cropper Modal -->
<div id="cropModal" class="crop-modal">
    <div class="crop-container">
        <div class="crop-area">
            <img id="cropImage" src="" alt="Image to crop">
        </div>
        <div class="crop-controls">
            <button type="button" class="btn btn-primary" onclick="applyCrop()">Apply Crop</button>
            <button type="button" class="btn btn-secondary" onclick="cancelCrop()">Cancel</button>
        </div>
    </div>
</div>

<!-- Scripts -->
<script src="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.js"></script>

<script>
    let uploadedFiles = [];
    let currentCropper = null;
    let currentImageIndex = null;

    // Initialize event listeners
    document.addEventListener('DOMContentLoaded', function() {
        const imageInput = document.getElementById('imageInput');
        const uploadPlaceholder = document.getElementById('uploadPlaceholder');

        imageInput.addEventListener('change', handleImageSelection);

        // Drag and drop handlers
        uploadPlaceholder.addEventListener('dragover', (e) => {
            e.preventDefault();
            uploadPlaceholder.style.borderColor = '#007bff';
            uploadPlaceholder.style.backgroundColor = '#f8f9fa';
        });

        uploadPlaceholder.addEventListener('dragleave', (e) => {
            e.preventDefault();
            uploadPlaceholder.style.borderColor = '#ccc';
            uploadPlaceholder.style.backgroundColor = 'transparent';
        });

        uploadPlaceholder.addEventListener('drop', (e) => {
            e.preventDefault();
            uploadPlaceholder.style.borderColor = '#ccc';
            uploadPlaceholder.style.backgroundColor = 'transparent';
            
            const files = Array.from(e.dataTransfer.files);
            handleImageSelection({ target: { files } });
        });
    });

    function triggerFileInput() {
        document.getElementById('imageInput').click();
    }

    function handleImageSelection(event) {
        const files = Array.from(event.target.files);
        const errorDiv = document.getElementById('images-error');
        
        errorDiv.textContent = '';
        
        if (files.length + uploadedFiles.length > 4) {
            errorDiv.textContent = 'Maximum 4 images allowed';
            return;
        }

        files.forEach((file) => {
            if (!file.type.match('image.*')) {
                errorDiv.textContent = 'Only image files are allowed';
                return;
            }

            if (file.size > 5 * 1024 * 1024) {
                errorDiv.textContent = 'Image size should not exceed 5MB';
                return;
            }

            const reader = new FileReader();
            reader.onload = function(e) {
                const index = uploadedFiles.length;
                createImagePreview(e.target.result, index);
                uploadedFiles.push({
                    file: file,
                    preview: e.target.result,
                    cropped: null
                });
            };
            reader.readAsDataURL(file);
        });

        event.target.value = '';
    }

    function createImagePreview(src, index) {
        const previewGrid = document.getElementById('imagePreviewGrid');
        
        const previewCard = document.createElement('div');
        previewCard.className = 'preview-image-card';
        previewCard.innerHTML = `
            <img src="${src}" class="thumbnail" data-index="${index}">
            <div class="preview-image-actions">
                <button type="button" class="btn btn-sm btn-light" onclick="openCropModal(${index})">
                    <i class="fas fa-crop"></i>
                </button>
                <button type="button" class="btn btn-sm btn-light" onclick="deleteImage(${index})">
                    <i class="fas fa-trash"></i>
                </button>
            </div>
        `;
        
        previewGrid.appendChild(previewCard);
    }

    function openCropModal(index) {
        const modal = document.getElementById('cropModal');
        const cropImage = document.getElementById('cropImage');
        
        currentImageIndex = index;
        cropImage.src = uploadedFiles[index].cropped || uploadedFiles[index].preview;
        modal.style.display = 'block';
        
        if (currentCropper) {
            currentCropper.destroy();
        }
        
        currentCropper = new Cropper(cropImage, {
            aspectRatio: 1,
            viewMode: 2,
            dragMode: 'move',
            autoCropArea: 1,
            restore: false,
            guides: true,
            center: true,
            highlight: false,
            cropBoxMovable: true,
            cropBoxResizable: true,
            toggleDragModeOnDblclick: false,
        });
    }

    function applyCrop() {
        if (currentCropper && currentImageIndex !== null) {
            const canvas = currentCropper.getCroppedCanvas({
                width: 600,
                height: 600
            });
            
            const preview = document.querySelector(`.thumbnail[data-index="${currentImageIndex}"]`);
            const croppedDataUrl = canvas.toDataURL();
            preview.src = croppedDataUrl;
            
            uploadedFiles[currentImageIndex].cropped = croppedDataUrl;
            
            closeCropModal();
        }
    }

    function cancelCrop() {
        closeCropModal();
    }

    function closeCropModal() {
        const modal = document.getElementById('cropModal');
        modal.style.display = 'none';
        
        if (currentCropper) {
            currentCropper.destroy();
            currentCropper = null;
        }
        
        currentImageIndex = null;
    }

    function deleteImage(index) {
        uploadedFiles.splice(index, 1);
        refreshImagePreviews();
    }

    function refreshImagePreviews() {
        const previewGrid = document.getElementById('imagePreviewGrid');
        previewGrid.innerHTML = '';
        
        uploadedFiles.forEach((file, index) => {
            createImagePreview(file.cropped || file.preview, index);
        });
    }
// Modify the form submission handler to include image data
function validateForm() {
    const productName = document.getElementById('product_name').value.trim();
    const brand = document.querySelector('select[name="brand"]').value;
    const description = document.querySelector('textarea[name="description"]').value.trim();
    const regularPrice = document.querySelector('input[name="regularPrice"]').value;
    const salePrice = document.querySelector('input[name="salePrice"]').value;
    const quantity = document.querySelector('input[name="quantity"]').value;
    const color = document.querySelector('input[name="color"]').value.trim();
    const category = document.querySelector('select[name="category"]').value;
    const errorDivs = document.querySelectorAll('.error-message');
    let isValid = true;

    // Clear all previous error messages
    errorDivs.forEach(div => div.textContent = '');

    // Validate required fields
    if (productName === '') {
        document.getElementById('productName-error').textContent = 'Product name is required';
        isValid = false;
    }
    if (brand === '') {
        document.getElementById('brand-error').textContent = 'Brand selection is required';
        isValid = false;
    }
    if (description === '') {
        document.getElementById('description-error').textContent = 'Description is required';
        isValid = false;
    }
    if (regularPrice === '' || parseFloat(regularPrice) <= 0) {
        document.getElementById('regularPrice-error').textContent = 'Enter a valid regular price';
        isValid = false;
    }
    if (salePrice !== '' && parseFloat(salePrice) >= parseFloat(regularPrice)) {
        document.getElementById('salePrice-error').textContent = 'Sale price must be lower than regular price';
        isValid = false;
    }
    if (quantity === '' || parseInt(quantity) <= 0) {
        document.getElementById('quantity-error').textContent = 'Enter a valid quantity';
        isValid = false;
    }
    if (color === '') {
        document.getElementById('color-error').textContent = 'Color is required';
        isValid = false;
    }
    if (category === '') {
        document.getElementById('category-error').textContent = 'Category selection is required';
        isValid = false;
    }
    if (typeof uploadedFiles === "undefined" || uploadedFiles.length === 0) {
    document.getElementById('images-error').textContent = 'At least one image is required';
    isValid = false;
}

    if (isValid) {
        // Create FormData object for multipart/form-data submission
        const formData = new FormData(document.querySelector('form'));

        
        // Add processed images to form data
        uploadedFiles.forEach((file, index) => {
            // Convert base64 to blob if the image was cropped
            if (file.cropped) {
                const imageBlob = dataURLToBlob(file.cropped);
                formData.append("productImages", imageBlob, `product-images-${index}.jpg`);

            } else {
                formData.append("productImages", file.file);

            }
        });

        // Optional: Show loading state
        const submitButton = document.querySelector('button[type="submit"]');
        submitButton.disabled = true;
        submitButton.innerHTML = '<span class="spinner-border spinner-border-sm me-2"></span>Adding Product...';

        // Submit the form using fetch
        fetch('/admin/addProduct', {
            method: 'POST',
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                // Redirect to products list or show success message
                window.location.href = '/admin/products?success=true';
            } else {
                // Show error message
                const errorDiv = document.getElementById('form-error');
                errorDiv.textContent = data.message || 'Failed to add product. Please try again.';
                errorDiv.style.display = 'block';
                
                // Reset button state
                submitButton.disabled = false;
                submitButton.innerHTML = 'Add Product';
            }
        })
        .catch(error => {
            console.error('Error:', error);
            // Show error message and reset button state
            const errorDiv = document.getElementById('form-error');
            errorDiv.textContent = 'An error occurred. Please try again.';
            errorDiv.style.display = 'block';
            
            submitButton.disabled = false;
            submitButton.innerHTML = 'Add Product';
        });

        // Prevent default form submission
        return false;
    }

    return isValid;
}

// Helper function to convert base64 to blob
function dataURLToBlob(dataURL) {
    const arr = dataURL.split(',');
    const mime = arr[0].match(/:(.*?);/)[1];
    const bstr = atob(arr[1]);
    let n = bstr.length;
    const u8arr = new Uint8Array(n);
    
    while (n--) {
        u8arr[n] = bstr.charCodeAt(n);
    }
    
    return new Blob([u8arr], { type: mime });
}

// Add error div to the form for general form errors
document.addEventListener('DOMContentLoaded', function() {
    const form = document.querySelector('form');
    const errorDiv = document.createElement('div');
    errorDiv.id = 'form-error';
    errorDiv.className = 'alert alert-danger';
    errorDiv.style.display = 'none';
    form.insertBefore(errorDiv, form.firstChild);
});
</script>
    <%- include("../../views/partials/admin/footer") %>